syntax = "proto3";

import "google/protobuf/empty.proto";

option java_package = "generated";

message Type{
  bool type = 1;
}

message PickUpPoint{
  int64 id = 1;
  int64 addressId = 2;
  string name = 3;
  string opening_hours = 4;
  string closing_hours= 5;
}

message Warehouse{
  int64 id = 1;
  int64 addressId = 2;
}

message PickUpPointWithAddress{
  int64 id = 1;
  string name = 2;
  string opening_hours = 3;
  string closing_hours= 4;
  Address address = 5;
}
message CreatePickUpPointWithAddress{
  string name = 1;
  string opening_hours = 2;
  string closing_hours= 3;
  Address address = 4;
}
message CreateWarehouseWithAddress{
  Address address = 1;
}




message WarehouseWithAddress{
  int64 id = 1;
  Address address = 2;
}


message Location{
  oneof type{
    PickUpPoint pickUpPoint = 1;
    Warehouse warehouse = 2;
  }
  bool isPickUpPoint = 3;
}

message LocationWithAddress{
  oneof type{
    PickUpPointWithAddress pick_up_point = 1;
    WarehouseWithAddress warehouse = 2;
  }
  bool isPickUpPoint = 3;
}
message CreateLocationWithAddress{
  oneof type{
    CreatePickUpPointWithAddress pick_up_point = 1;
    CreateWarehouseWithAddress warehouse = 2;
  }
  bool isPickUpPoint = 3;
}

message Address{
  int64 id=1;
  string city = 2;
  string zip = 3;
  string street = 4;
  string street_number = 5;
}

message getLocationIdRpc{
  int64 id = 1;
}

message getAddressIdRpc{
  int64 id = 1;
}

message getLocationsIdInListRpc{
  repeated int64 id = 1;
}

message Locations{
  repeated Location locations = 1;
}

message LocationsWithAddress{
  repeated LocationWithAddress locations = 1;
}

message getTypeRpc{
  string type = 1;
}

service LocationService{
  rpc addLocation(CreateLocationWithAddress) returns (LocationWithAddress);
  rpc getLocationById(getLocationIdRpc) returns(Location);
  rpc getLocationWithAddressById(getLocationIdRpc) returns(LocationWithAddress);
  rpc getAddressById(getAddressIdRpc) returns(Address);
  rpc getAllLocations(google.protobuf.Empty) returns(Locations);
  rpc getAllLocationsByType(getTypeRpc) returns(Locations);
  rpc getAllLocationsByIdIn(getLocationsIdInListRpc) returns(Locations);
  rpc getAllLocationsWithAddressByType(getTypeRpc) returns(LocationsWithAddress);
  rpc getAllLocationsWithAddressByIdIn(getLocationsIdInListRpc) returns(LocationsWithAddress);
}