@page "/LogIn"
@using Client.Interfaces
@using CSharpShared.Exception
@using gateway.DTO
@using grpc.Exception
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject IAuthService AuthService
@inject NavigationManager NavManager
@inject ProtectedSessionStorage ProtectedSessionStorage
<PageTitle>Log in</PageTitle>
<div class="container h-75">
    <div class="row align-items-center">
        <div class="me-5 col-12 col-xxl-5">
            <div class="card window p-4">
                <div class="card-body">
                    <h1 class="fw-bold text-uppercase text-center">Log in</h1>
                    <div class="mt-2">
                        <label for="email">Email address</label>
                        <input type="email" class="form-control" id="email" @bind="username">
                    </div>
                    <div class="mt-2">
                        <label for="password">Password</label>
                        <input type="password" class="form-control" id="password" @bind="password">
                    </div>
                    <div class="d-grid mt-4">
                        <button class="btn btn-primary" type="submit" @onclick="Login" >Log in</button>
                        @if (!string.IsNullOrEmpty(errorMessage))
                        {
                            <div class="alert alert-danger mt-2" role="alert">
                                @errorMessage
                            </div>
                        }
                    </div>
                    <p class="mt-3 text-center">Do not have an account? <a href="/RegisterUser">Register</a></p>
                </div>
            </div>
        </div>
        <div class="col">
            <img src="loginMonkey.jpg" width="600px" alt="monkey" class="rounded-3 d-none d-xxl-block">
        </div>
    </div>


</div>
<style>
    .window{
    background: rgba(255, 255, 255, 0.2);
    border-radius: 10px;
    box-shadow: 0 4px 30px rgba(0, 0, 0, 0.1);
    backdrop-filter: blur(5px);
    -webkit-backdrop-filter: blur(5px);
    border: 1px solid rgba(255, 255, 255, 0.3);
    }
  
    
</style>

@code {
    private string username = "";
    private string password = "";
    private string errorMessage = "";

    private async void Login()
    {
        try
        {
            if (String.IsNullOrEmpty(username) || String.IsNullOrEmpty(password))
            {
                errorMessage = "Please fill in all fields.";
                return;
            }
            var dto = new LoginDto(username, password);
            var user = await AuthService.LoginAsync(dto);
            GlobalContext globalContext = new GlobalContext(user);
            await ProtectedSessionStorage.SetAsync("globalContext", globalContext);
            errorMessage = "";
            StateHasChanged();
            NavManager.NavigateTo("/AllUserPackagesOverview");
        }
        catch (LoginException e)
        {
            errorMessage = "The email or password is incorrect.";
            StateHasChanged();
            return;
        }
        catch (EmailNotVerifiedException e)
        {
            errorMessage = "Your email is not verified. Please check your email.";
            StateHasChanged();
        }
        catch (Exception e)
        {
            errorMessage = "Something went wrong. Please try again later.";
            StateHasChanged();
            return;
        }
    }

}