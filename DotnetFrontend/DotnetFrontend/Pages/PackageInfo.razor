@page "/PackageInfo"
@using Client.Interfaces
@using gateway.DTO
@using System.Collections.Specialized
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject IPackageService PackageService;
@inject NavigationManager NavigationManager
@inject ILocationService LocationService;
@inject ProtectedSessionStorage protectedSessionStorage;

<PageTitle>See package information</PageTitle>

<h1 class="text-center fw-bold text-uppercase">Track your package</h1>
<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col col-md-4">
            <input type="text" class="form-control" id="packageNumber" @bind="packageNumber" placeholder="P 123 123 123" @bind:event="oninput">
        </div>

        <div class="col col-md-3 mx-0 ">
            <button type="submit" @onclick="ShowPackageInfo" disabled="@(string.IsNullOrEmpty(packageNumber))" class="btn btn-primary">Track a package</button>
        </div>

        @if (!string.IsNullOrEmpty(errorLabel))
        {
            <div class="d-flex justify-content-center mt-5">
                <div class="alert alert-primary" role="alert">
                    @errorLabel
                </div>
            </div>
            <div class="d-flex justify-content-center">

                <img src="packageNotFoundMonkey.jpg" alt="package not found" class="pt-2 w-25 rounded">

            </div>
        }
    </div>
</div>


@if (packageInfoValid)
{
    <div class="container w-lg-50">

        <table class="table mt-5">
            <tbody>
            <tr>
                <th scope="row">Package number</th>
                <td>@package.PackageNumber</td>
            </tr>
            <tr>
                <th scope="row">Sender</th>
                <td>@package.SenderName</td>
            </tr>
            <tr>
                <th scope="row">Receiver</th>
                <td>@package.ReceiverName</td>
            </tr>
            <tr>
                <th scope="row">Status</th>
                <td>@package.PackageStatus</td>

            </tr>
            <tr>
                <th scope="row">Current location</th>
                @if (package.CurrentLocation == null)
                {
                    <td>Package has not been sent yet</td>
                }
                else
                {
                    <td>@package.CurrentLocation.Address.City @package.CurrentLocation.Address.Street @package.CurrentLocation.Address.BuildingNumber</td>
                }


            </tr>
            <tr>
                <AuthorizeView>
                    <NotAuthorized>
                        <th scope="row">Final destination</th>
                        <td>@package.FinalDestination.Address.City @package.FinalDestination.Address.Street @package.FinalDestination.Address.BuildingNumber</td>
                    </NotAuthorized>
                    <Authorized>
                        <th scope="row">Final destination</th>
                        @if (package.CurrentLocation == null)
                        {
                            <td>
                            <select class="form-select" @bind="pickupPointId" @bind:event="oninput" @bind:after="UpdateFinalLocation">
                                    @if (locations != null)
                                    {
                                        
                                            @foreach (var pickupPoint in locations)
                                            {
                                                <option value="@pickupPoint.Id">@pickupPoint.Address.City @pickupPoint.Address.Street @pickupPoint.Address.BuildingNumber</option>
                                            }
                                        
                                    }
                                </select>
                                @if (locations == null)
                                {
                                    errorMsgForPickupPoints = "No pickup points were found";
                                    <pickupPoint>@errorMsgForPickupPoints</pickupPoint>
                                }
                            </td>
                        }
                        else
                        {
                            <td>@package.FinalDestination.Address.City @package.FinalDestination.Address.Street @package.FinalDestination.Address.BuildingNumber</td>
                        }
                    </Authorized>
                </AuthorizeView>


            </tr>
            </tbody>
        </table>
    </div>
}


@code {
    private string pickupPoint = "";
    private IEnumerable<GetPickUpPointDto>? locations = new List<GetPickUpPointDto>();
    private string errorMsgForPickupPoints = "";
    private string? packageNumber;
    private string errorLabel = "";
    bool packageInfoValid;
    private GetPackageDto package;
    private string user;
    private GlobalContext globalContext;
    private long pickupPointId;

    private async Task ShowPackageInfo()
    {
        packageInfoValid = false;
        try
        {
            package = await PackageService.GetPackageByTrackingNumberAsync(packageNumber);
            foreach (var pickupPoint in locations)
            {
                if (pickupPoint.Address.Id == package.FinalDestination.Address.Id)
                {
                    pickupPointId = pickupPoint.Id;
                }
            }
            packageInfoValid = true;
            errorLabel = "";
        }
        catch (Exception e)
        {
            errorLabel = "There is no package with this tracking number: " + packageNumber;
        }
    }
    
    private async Task UpdateFinalLocation()
    {
        Console.WriteLine(pickupPointId);
        var dto = new UpdateFinalLocationDto()
        {
            PackageId = package.Id,
            LocationId = pickupPointId
        };
        try
        {
            await PackageService.UpdateFinalLocation(dto, globalContext.Jwt);
        }
        catch (Exception e)
        {
            errorLabel = "Couldn't update: " + packageNumber;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        
        locations = await LocationService.GetAllPickupPoints();
        string currentUrl = NavigationManager.Uri;
        Uri uri = new Uri(currentUrl);
        string query = uri.Query;
        NameValueCollection queryParameters = System.Web.HttpUtility.ParseQueryString(query);
        packageNumber = queryParameters.Get("package");
        globalContext = (await protectedSessionStorage.GetAsync<GlobalContext>("globalContext")).Value;
        
        if (packageNumber != null)
        {
            await ShowPackageInfo();
            pickupPoint = package.FinalDestination.Address.Id.ToString();
        }
    }
    
    


}