@page "/PackageInfo"
@using Client.Interfaces
@using gateway.DTO
@using System.Collections.Specialized
@inject IPackageService PackageService;
@inject NavigationManager NavigationManager
@inject ILocationService LocationService;

<PageTitle>See package information</PageTitle>

<h1 class="text-center fw-bold text-uppercase">Track your package</h1>
<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col col-md-4">
            <input type="text" class="form-control" id="packageNumber" @bind="packageNumber" placeholder="P 123 123 123" @bind:event="oninput">
        </div>

        <div class="col col-md-3 mx-0 ">
            <button type="submit" @onclick="ShowPackageInfo" disabled="@(string.IsNullOrEmpty(packageNumber))" class="btn btn-primary">Track a package</button>
        </div>

        @if (!string.IsNullOrEmpty(errorLabel))
        {
            <div class="d-flex justify-content-center mt-5">
                <div class="alert alert-primary" role="alert">
                    @errorLabel
                </div>
            </div>
            <div class="d-flex justify-content-center">

                <img src="packageNotFoundMonkey.jpg" alt="package not found" class="pt-2 w-25 rounded">

            </div>
        }
    </div>
</div>


@if (packageInfoValid)
{
    <div class="container w-lg-50">

        <table class="table mt-5">
            <tbody>
            <tr>
                <th scope="row">Package number</th>
                <td>@package.PackageNumber</td>
            </tr>
            <tr>
                <th scope="row">Sender</th>
                <td>@package.SenderName</td>
            </tr>
            <tr>
                <th scope="row">Receiver</th>
                <td>@package.ReceiverName</td>
            </tr>
            <tr>
                <th scope="row">Status</th>
                <td>@package.PackageStatus</td>

            </tr>
            <tr>
                <th scope="row">Current location</th>
                @if (package.CurrentLocation == null)
                {
                    <td>Package has not been sent yet</td>
                }
                else
                {
                    <td>@package.CurrentLocation.Address.City</td>
                }


            </tr>
            <tr>
                <th scope="row">Final destination</th>
                <td>@package.FinalDestination.Address.City</td>
                <div class="mb-3">
                    <label class="form-label">Destination pickup point</label>
                    <select class="form-select" @bind="pickupPoint">
                        @if (locations != null)
                        {
                            <option value = @package.FinalDestination.Address.City selected=""></option>
                            @foreach (var pickupPoint in locations)
                            {
                                <option value="@pickupPoint.Id">@pickupPoint.Address.City @pickupPoint.Address.Street @pickupPoint.Address.BuildingNumber</option>
                            }
                        }
                    </select>
                    @if (locations == null)
                    {
                        errorMsgForPickupPoints = "No pickup points were found";
                        <pickupPoint>@errorMsgForPickupPoints</pickupPoint>
                    }
                </div>

            </tr>
            </tbody>
        </table>
    </div>
}


@code {
    private string pickupPoint = "";
    private IEnumerable<GetPickUpPointDto>? locations = new List<GetPickUpPointDto>();
    private string errorMsgForPickupPoints = "";
    private SendPackageReturnDto packageWithAllInfo;
    private string? packageNumber;
    private string errorLabel = "";
    bool packageInfoValid;
    private GetPackageDto package;
    private string user;


    private async Task ShowPackageInfo()
    {
        packageInfoValid = false;
        try
        {
            package = await PackageService.GetPackageByTrackingNumberAsync(packageNumber);
            packageInfoValid = true;
            errorLabel = "";
        }
        catch (Exception e)
        {
            errorLabel = "There is no package with this tracking number: " + packageNumber;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        locations = await LocationService.GetAllPickupPoints();
        string currentUrl = NavigationManager.Uri;
        Uri uri = new Uri(currentUrl);
        string query = uri.Query;
        NameValueCollection queryParameters = System.Web.HttpUtility.ParseQueryString(query);
        packageNumber = queryParameters.Get("package");
        if (packageNumber != null)
        {
            await ShowPackageInfo();
        }
    }


}
