@page "/SendPackage"
@inject NavigationManager NavManager
@using Client.Interfaces
@using gateway.DTO
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Validators.packageValidation
@inject IPackageService PackageService;
@inject ILocationService LocationService;
@inject ProtectedSessionStorage protectedSessionStorage
<PageTitle>Send a package</PageTitle>

<h1 class="text-center fw-bold text-uppercase">SEND a Package</h1>

<EditForm Model="_packageValidator" OnValidSubmit="SendPackageAsync" >

    <div class="container mt-5">
        <div class=" row justify-content-center">
            <div class="col-3">
                <DataAnnotationsValidator/>
                <label for="radio-card-1" class="radio-card">
                    <div class="card-content-wrapper">
                        <span class="check-icon"></span>
                        <div class="card">
                            <div class="card-header">
                                <input type="radio" name="radio-card" id="radio-card-1" checked @onchange="@(() => _packageValidator.PackageType = "1")"/>
                                <span>Type 1</span>
                            </div>
                            <div class="card-body bg-light">
                                <h5 class="card-title">Standard package</h5>
                                <p class="card-text">Maximum size: 50 x 40 x 30 cm and maximum weight: 5 kg</p>
                            </div>
                        </div>
                    </div>
                </label>
            </div>

            <div class="col-3">
                <label for="radio-card-2" class="radio-card">
                    <div class="card-content-wrapper">
                        <span class="check-icon"></span>
                        <div class="card">
                            <div class="card-header">
                                <input type="radio" name="radio-card" id="radio-card-2" @onchange="@(() => _packageValidator.PackageType = "2")"/>
                                <span>Type 2</span>
                            </div>
                            <div class="card-body bg-light">
                                <h5 class="card-title">Overweight package</h5>
                                <p class="card-text">Maximum size: 60 x 50 x 40 cm and maximum weight: 30 kg</p>
                            </div>
                        </div>
                    </div>
                </label>
            </div>
            <div class="col-3">
                <label for="radio-card-3" class="radio-card" >
                    <div class="card-content-wrapper">
                        <span class="check-icon"></span>
                        <div class="card">
                            <div class="card-header">
                                <input type="radio" name="radio-card" id="radio-card-3" @onchange="@(() => _packageValidator.PackageType = "3")"/>
                                <span>Type 3</span>
                            </div>
                            <div class="card-body bg-light">
                                <h5 class="card-title">Extra package</h5>
                                <p class="card-text">Maximum size: 150 x 90 x 50 cm and maximum weight: 50 kg</p>
                            </div>
                        </div>
                    </div>
                </label>
            </div>
        </div>
    </div>


    <div class="container w-100 w-lg-50 mt-5">

        <div class="row row-cols-2">
            <div class="col">
                <div class="mb-3">
                    <label for="receiverName" class="form-label">Receiver’s name</label>
                    <input type="text" class="form-control" id="receiverName" placeholder="Receiver's name" @bind="_packageValidator.ReceiverName" @bind:event="oninput"/>
                    <ValidationMessage For="() => _packageValidator.ReceiverName"/>
                </div>
            </div>
        
            
            <div class="col">
                <div class="mb-3">
                    <label for="senderName" class="form-label">Sender’s name</label>
                    <input type="text" class="form-control" id="senderName" placeholder="Sender's name" @bind="_packageValidator.SenderName" @bind:event="oninput">
                    <ValidationMessage For="() => _packageValidator.SenderName"/>
                </div>
            </div>
            <div class="col">
                <div class="mb-3">
                    <label for="receiverEmail" class="form-label">Receiver’s email address</label>
                    <input type="text" class="form-control" id="receiverEmail" placeholder="Receiver's email" @bind="_packageValidator.ReceiverEmail" @bind:event="oninput">
                    <ValidationMessage For="() => _packageValidator.ReceiverEmail"/>
                </div>
            </div>
            <div class="col">
                <div class="mb-3">
                    <label for="senderEmail" class="form-label">Sender’s email address</label>
                    <input type="text" class="form-control" id="senderEmail" placeholder="Sender's email" @bind="_packageValidator.SenderEmail" @bind:event="oninput">
                    <ValidationMessage For="() => _packageValidator.SenderEmail"/>
                </div>
            </div>
            <div class="col">
                <div class="mb-3">
                    <label for="receiverPhone" class="form-label">Receiver’s phone number</label>
                    <input type="tel" class="form-control" id="receiverPhone" placeholder="Receiver's phone" @bind="_packageValidator.ReceiverPhoneNumber" @bind:event="oninput">
                    <ValidationMessage For="() => _packageValidator.ReceiverPhoneNumber"/>
                </div>
            </div>
            <div class="col">
                <div class="mb-3">
                    <label for="senderPhone" class="form-label">Sender’s phone number</label>
                    <input type="tel" class="form-control" id="senderPhone" placeholder="Sender's phone" @bind="_packageValidator.SenderPhoneNumber" @bind:event="oninput">
                    <ValidationMessage For="() => _packageValidator.SenderPhoneNumber"/>
                </div>
            </div>
            <div class="col-12">
                <div class="mb-3">
                    <label class="form-label">Destination pickup point</label>
                    <select class="form-select" @bind="pickupPoint">
                        @if (locations != null)
                        {
                            @foreach (var pickupPoint in locations)
                            {
                                <option value="@pickupPoint.Id">@pickupPoint.Address.City @pickupPoint.Address.Street @pickupPoint.Address.BuildingNumber</option>
                            }
                        }
                    </select>
                    @if (locations == null)
                    {
                        errorMsgForPickupPoints = "No pickup points were found";
                        <pickupPoint>@errorMsgForPickupPoints</pickupPoint>
                    }
                </div>
            </div>
              
        </div>

        <div class="text-center mt-5">
           
            <button type="submit" class="btn btn-primary" >Send a package</button>
        </div>
       
    </div>
   


</EditForm>



@code {
    private PackageValidator _packageValidator = new PackageValidator();
    private string pickupPoint = "";
    private IEnumerable<GetPickUpPointDto>? locations = new List<GetPickUpPointDto>();
    private string errorMsgForPickupPoints = "";
    private string randomString = "";
    //private string resultMsg = "";
    private string color = "";
    private SendPackageReturnDto packageWithAllInfo;

   
    

    private async Task SendPackageAsync()
    {
        try
        {
            UserDto sender = new UserDto(_packageValidator.SenderPhoneNumber, _packageValidator.SenderEmail, _packageValidator.SenderName);
            UserDto receiver = new UserDto(_packageValidator.ReceiverPhoneNumber, _packageValidator.ReceiverEmail, _packageValidator.ReceiverName);
            SendPackageDto sendPackageDto = new SendPackageDto(long.Parse(pickupPoint),  sender, receiver: receiver, long.Parse(_packageValidator.PackageType) );
            
            packageWithAllInfo = await PackageService.CreatePackage(sendPackageDto);
            string packageTrackingNumber = packageWithAllInfo.PackageNumber;
            NavManager.NavigateTo("/PackageSentConfirmation/" + packageTrackingNumber);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            //resultMsg = e.Message;
            color = "red";
        }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            pickupPoint = "1";
            _packageValidator.PackageType = "1";
            errorMsgForPickupPoints = "";
            locations = await LocationService.GetAllPickupPoints();
            var globalContext = (await protectedSessionStorage.GetAsync<GlobalContext>("globalContext")).Value;
            if (globalContext != null || globalContext.UserContext != null)
            {
                _packageValidator.SenderEmail = globalContext.UserContext.Email;
                _packageValidator.SenderName = globalContext.UserContext.Name;
                _packageValidator.SenderPhoneNumber = globalContext.UserContext.Phone;
            }
    // setting the values from the global context
            
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            errorMsgForPickupPoints = e.Message;
        }
    }
}