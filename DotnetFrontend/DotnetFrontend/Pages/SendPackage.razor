@page "/SendPackage"
@using Client.Interfaces
@using gateway.DTO
@inject IPackageService PackageService;
@inject ILocationService LocationService;
<PageTitle>Send a package</PageTitle>

<h1 class="text-center fw-bold text-uppercase">SEND a Package</h1>

<EditForm Model="@package" OnValidSubmit="SendPackageAsync">
    
    <div class="container mt-5">
        <div class=" row justify-content-center">
            <div class="col-3">
                <DataAnnotationsValidator/>
                <label for="radio-card-1" class="radio-card" @bind="package.TypeId">
                    <div class="card-content-wrapper">
                        <span class="check-icon"></span>
                        <div class="card">
                            <div class="card-header">
                                <input type="radio" name="radio-card" id="radio-card-1" checked/>
                                <span>Type 1</span>
                            </div>
                            <div class="card-body bg-light">
                                <h5 class="card-title">Standard package</h5>
                                <p class="card-text">Maximum size: 50 x 40 x 30 cm and maximum weight: 5 kg</p>
                            </div>
                        </div>
                    </div>
                </label>
            </div>

            <div class="col-3">
                <label for="radio-card-2" class="radio-card" @bind="package.TypeId">
                    <div class="card-content-wrapper">
                        <span class="check-icon"></span>
                        <div class="card">
                            <div class="card-header">
                                <input type="radio" name="radio-card" id="radio-card-2"/>
                                <span>Type 2</span>
                            </div>
                            <div class="card-body bg-light">
                                <h5 class="card-title">Overweight package</h5>
                                <p class="card-text">Maximum size: 60 x 50 x 40 cm and maximum weight: 30 kg</p>
                            </div>
                        </div>
                    </div>
                </label>
            </div>
            <div class="col-3">
                <label for="radio-card-3" class="radio-card" @bind="package.TypeId">
                    <div class="card-content-wrapper">
                        <span class="check-icon"></span>
                        <div class="card">
                            <div class="card-header">
                                <input type="radio" name="radio-card" id="radio-card-3"/>
                                <span>Type 3</span>
                            </div>
                            <div class="card-body bg-light">
                                <h5 class="card-title">Extra package</h5>
                                <p class="card-text">Maximum size: 150 x 90 x 50 cm and maximum weight: 50 kg</p>
                            </div>
                        </div>
                    </div>
                </label>
            </div>
        </div>
    </div>
    

    <div class="container w-100 w-lg-50 mt-5">
        <div class="row row-cols-2">
            <div class="col">
                <div class="mb-3">
                    <label for="receiverName" class="form-label">Receiver’s name</label>
                    <input type="text" class="form-control" id="receiverName" placeholder="Alex Bolfa" @bind="package.Receiver.Name" @bind:event="oninput">
                    <ValidationMessage For="() => package.Receiver.Name"/>
                </div>
            </div>
            @*
            <div class="col">
                <div class="mb-3">
                    <label for="senderName" class="form-label">Receiver’s name</label>
                    <input type="text" class="form-control" id="senderName" placeholder="Alex Bolfa" @bind="package.Sender.Name" @bind:event="oninput">
                    <ValidationMessage For="() => package.Sender.Name"/>
                </div>
            </div>
            *@
            <div class="col">
                <div class="mb-3">
                    <label for="receiverEmail" class="form-label">Receiver’s email address</label>
                    <input type="text" class="form-control" id="receiverEmail" placeholder="alex@hotmail.com" @bind="package.Receiver.Email" @bind:event="oninput">
                    <ValidationMessage For="() => package.Receiver.Email"/>
                </div>
            </div>
            <div class="col">
                <div class="mb-3">
                    <label for="receiverPhone" class="form-label">Receiver’s phone number</label>
                    <input type="tel" class="form-control" id="receiverPhone" placeholder="13 67 67 87" @bind="package.Receiver.Phone" @bind:event="oninput">
                    <ValidationMessage For="() => package.Receiver.Phone"/>
                </div>
            </div>

            <div class="col-12">
                <div class="mb-3">
                    <label class="form-label">Destination pickup point</label>
                    <select class="form-select" @bind="type">
                        @if (locations != null)
                        {
                            @foreach (var pickupPoint in locations)
                            {
                                <option value="@pickupPoint.Id">@pickupPoint.Address.City @pickupPoint.Address.Street @pickupPoint.Address.BuildingNumber</option>
                            }
                        }
                    </select>

                </div>

            </div>

        </div>
        
        <div class="text-center mt-5">
            <button type="submit" class="btn btn-primary">Send a package</button>
        </div>
    </div>
    
</EditForm>


@code {
    public  SendPackageDto package = new SendPackageDto();
    private string type = "";
    private IEnumerable<GetPickUpPointDto>? locations = new List<GetPickUpPointDto>();

    private string errorMsgForPickupPoints = "";
    private string resultMsg = "";
    private string color = "";

    private async Task SendPackageAsync()
    {
        resultMsg = "";
        try
        {
            await PackageService.CreatePackage(package);
            resultMsg = "User successfully created";
            color = "green";
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            resultMsg = e.Message;
            color = "red";
        }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            errorMsgForPickupPoints = "";
            locations = await LocationService.GetAllPickupPoints();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            errorMsgForPickupPoints = e.Message;
        }
    }



}