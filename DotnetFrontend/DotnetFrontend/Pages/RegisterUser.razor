@page "/RegisterUser"
@inject IAuthService service
@using gateway.DTO
@using Client.Interfaces
@using CSharpShared.Exception
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using persistance.Exception
@using Validators.userValidator
@inject ProtectedSessionStorage ProtectedSessionStorage
@inject NavigationManager NavManager
<PageTitle>Register</PageTitle>
<EditForm Model="_userValidator" OnValidSubmit="RegisterAsync">
    <div class="container h-75">
        <div class="row align-items-center">
            <div class="me-5 col-12 col-xxl-5">

                <div class="card window p-4">
                    <div class="card-body">
                        <h1 class="fw-bold text-uppercase text-center">Register</h1>
                        <DataAnnotationsValidator/>
                        <div class=" mt-2">
                            <label for="name">Name</label>
                            <input type="text" class="form-control" id="name" placeholder="Name" @bind="_userValidator.Name" @bind:event="oninput"/>
                            <ValidationMessage For="() => _userValidator.Name"/>
                        </div>
                        <div class="mt-2">
                            <label for="phoneNumber">Phone number</label>
                            <input type="tel" class="form-control" id="phoneNumber" placeholder="00 00 00 00" @bind="_userValidator.PhoneNumber" @bind:event="oninput"/>
                            <ValidationMessage For="() => _userValidator.PhoneNumber"/>
                        </div>
                        <div class="mt-2">
                            <label for="email">Email address</label>
                            <input type="email" class="form-control" id="email" placeholder="example@hotmail.com" @bind="_userValidator.Email" @bind:event="oninput"/>
                            <ValidationMessage For="() => _userValidator.Email"/>
                        </div>
                        <div class="mt-2">
                            <label for="password">Password</label>
                            <input type="password" class="form-control" id="password" @bind="_userValidator.Password" @bind:event="oninput"/>
                            <ValidationMessage For="() => _userValidator.Password"/>
                        </div>
                        <div class="d-grid mt-4">
                            <button class="btn btn-primary" type="submit" >Register</button>
                        </div>
                        <p class="mt-3 text-center">Already have an account? <a href="/Login">Log in</a></p>
                        @if (_errorMessage != "")
                        {
                            <div class="alert alert-danger" role="alert">
                                @_errorMessage
                            </div>
                        }
                    @if (_isRegistered)
                    {
                        <div class="alert alert-success" role="alert">
                            You have successfully registered. Now you have to verify your email address.
                        </div>
                    }</div>
                </div>
            </div>
            <div class="col">
                <img src="loginMonkey.jpg" width="600px" alt="monkey" class="rounded-3 d-none d-xxl-block">
            </div>
        </div>
    </div>
</EditForm>
<style>
    .window{
    background: rgba(255, 255, 255, 0.2);
    border-radius: 10px;
    box-shadow: 0 4px 30px rgba(0, 0, 0, 0.1);
    backdrop-filter: blur(5px);
    -webkit-backdrop-filter: blur(5px);
    border: 1px solid rgba(255, 255, 255, 0.3);
    }
  
    
</style>

@code {

    private UserValidator _userValidator = new UserValidator();
    private string _errorMessage = "";
    private bool _isRegistered = false;
    private RegisterDto RegisterDto;

    private async Task RegisterAsync()
    {
        try
        {
            RegisterDto dto = new RegisterDto(_userValidator.Email, _userValidator.Password, _userValidator.Name, _userValidator.PhoneNumber);
            await service.RegisterAsync(dto);
            _isRegistered = true;
            _errorMessage = "";
            StateHasChanged();

        }
        catch (InvalidArgumentsException e)
        {
            Console.WriteLine(e.GetBaseException());
            _errorMessage = "You have inserted invalid input data.";
            StateHasChanged();
        }
        catch (EmailTakenException e)
        {
            _errorMessage = "Email is already taken.";
            StateHasChanged();

        }
        catch (Exception e)
        {
            _errorMessage = "Something went wrong. Please try again later.";
            StateHasChanged();

            throw;
        }
    }

}