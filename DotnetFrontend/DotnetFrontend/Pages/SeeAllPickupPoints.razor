@page "/SeeAllPickupPoints"
@using Client.Interfaces
@using CSharpShared.Exception
@using gateway.DTO
@inject NavigationManager NavManager;
@using DotnetFrontend.Components
@inherits LayoutComponentBase
@inject ProtectedSessionStorage protectedSessionStorage
@using Grpc.Core
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ILocationService LocationService;
<PageTitle>Send a package</PageTitle>
<section class="container mt-4">
    <h2 class="mb-4">Pickup points</h2>
    <AuthorizeView Roles="Admin">
        <button class="btn btn-outline-dark mx-2" @onclick="goToCreateLocation">Create a Location</button>
    </AuthorizeView>
    <div class="row mt-4">
        @if (!locations.Any())
        {
            <span>There are no pickup points</span>
        }
        else
        {
            foreach (GetPickUpPointDto location in locations)
            {
                var locationAddress =   location.Address.City + " "+ location.Address.Street +" "+ location.Address.BuildingNumber;
                var openingHours = "Opened every day from "+location.OpenTime +" to " +location.CloseTime;
                <CardComponentForPickupPoints CardPicture="location.svg" CardTitle="@locationAddress" CardDescription="@openingHours" CardSubTitle="@location.Name"
                                                                  CardButtonMethod="@(() => deletePickupPoint(location.Id))" CardButtonText="Delete">
                    
                                       
                </CardComponentForPickupPoints>
            }  
        }
          @if (!String.IsNullOrEmpty(_error))
          {
              <div class="alert alert-danger">@_error</div>
          }
    </div>
</section>
<style>
  
    
</style>


@code {
    private IEnumerable<GetPickUpPointDto>? locations = new List<GetPickUpPointDto>();
    private bool LocationCanNotBeEdited;
    private string _error = "";
    protected override async Task OnInitializedAsync()
    {
        try
        {
            locations = await GetAllPickupPoints();

        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }

    private void goToCreateLocation()
    {
        NavManager.NavigateTo("/CreateLocation");
    }

    private   async Task<IEnumerable<GetPickUpPointDto>> GetAllPickupPoints()
    {
        return await LocationService.GetAllPickupPoints();
    }

    private async void deletePickupPoint(long id)
    {
        var globalContext = (await protectedSessionStorage.GetAsync<GlobalContext>("globalContext")).Value;
        if (globalContext == null || globalContext.UserContext == null)
        {
            throw new Exception("Global context is null");
        }
        try
        {
            await LocationService.DeletePickupPoint(id, globalContext.Jwt);
            locations = locations.Where(location => location.Id != id);
        }
        catch (LocationUsedException e)
        {
            GetPickUpPointDto location = locations.First(location => location.Id == id);
            _error = "Location " + location.Name+" has packages" ;
        }
        catch (Exception e)
        {
            _error = "Something went wrong";
        }
            InvokeAsync(() => StateHasChanged());


    }

}