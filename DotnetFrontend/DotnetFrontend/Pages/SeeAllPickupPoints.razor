@page "/SeeAllPickupPoints"
@using Client.Interfaces
@using CSharpShared.Exception
@using gateway.DTO
@using Grpc.Core
@inject ILocationService LocationService;
<PageTitle>Send a package</PageTitle>
<section class="container mt-4">
    <h2 class="mb-4">Pickup points</h2>
    <AuthorizeView Roles="Admin">
                <button class="btn btn-outline-dark mx-2" href="/CreateLocation">Create a pickup point</button>
    </AuthorizeView>
    <div class="row mt-4">
        @if (!locations.Any())
        {
            <span>There are no pickup points</span>
        }
        else
        {
            foreach (GetPickUpPointDto location in locations)
            {
                <div class="col-md-4 mb-4 ">
                    <div class="window">
                        <img src="location.svg" class="card-img" height="150" alt="forest">
                        <div class="card-body">
                            <h5 class="card-title text-center">@location.Address.City @location.Address.Street @location.Address.BuildingNumber</h5>
                            <hr>
                            <p class="text-center">Opened every day from <b>@location.OpenTime</b>
                                to <b>@location.CloseTime </b></p>
                        <AuthorizeView Roles="Admin">
                        <a  @onclick="() => deletePickupPoint(location.Id)">
                        <div class="d-flex align-items-center deleteButton px-1">
                                    
                            <img src="deletePickupPoint.svg" alt="deletePickupPoint"><b>Delete</b>
                                    
                        </div>
                        </a>
                            </AuthorizeView>
                        </div>
                    </div>
                </div>
            }  
        }
          @if (!String.IsNullOrEmpty(_error))
          {
              <div class="alert alert-danger">@_error</div>
          }  
    </div>
</section>
<style>
    .window{
    background: rgba(255, 255, 255, 0.2);
    border-radius: 10px;
    box-shadow: 0 4px 30px rgba(0, 0, 0, 0.1);
    backdrop-filter: blur(5px);
    -webkit-backdrop-filter: blur(5px);
    border: 1px solid rgba(255, 255, 255, 0.3);
    }
    .deleteButton{
    background-color: 	rgba(102, 206, 232, 0.65);
    border-radius: 20px;
    width: 90px;
    }
    .deleteButton:hover{
    background-color: rgba(53, 124, 193, 0.78);
    cursor: pointer;
    
    }
    
  
    
</style>


@code {
    private IEnumerable<GetPickUpPointDto>? locations = new List<GetPickUpPointDto>();
    private bool LocationCanNotBeEdited;
    private string _error = "";
    protected override async Task OnInitializedAsync()
    {
        try
        {
            locations = await GetAllPickupPoints();

        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }

    private   async Task<IEnumerable<GetPickUpPointDto>> GetAllPickupPoints()
    {
        return await LocationService.GetAllPickupPoints();
    }

    private async void deletePickupPoint(long id)
    {
        try
        {
            await LocationService.DeletePickupPoint(id);
            locations = locations.Where(location => location.Id != id);
        }
        catch (LocationUsedException e)
        {
            GetPickUpPointDto location = locations.First(location => location.Id == id);
            _error = "Location " + location.Name+" has packages" ;
        }
        catch (Exception e)
        {
            _error = "Something went wrong";
        }
            InvokeAsync(() => StateHasChanged());
        
       
    }

}